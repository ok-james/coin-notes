(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{423:function(e,_,v){e.exports=v.p+"assets/img/merkle_tree.e7e9c781.png"},424:function(e,_,v){e.exports=v.p+"assets/img/merkle_proof.4013188f.png"},467:function(e,_,v){"use strict";v.r(_);var t=v(65),r=Object(t.a)({},(function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("区块链是一个使用 "),t("code",[e._v("哈希指针")]),e._v("（hash pointers） 所连接的链表。这样可以做到防篡改。只需要知道最新一个区块的哈希值，就可以反向验证整个区块链是否有被篡改过。")]),e._v(" "),t("p",[e._v("创世区块，最近产生的区块。")]),e._v(" "),t("h2",{attrs:{id:"区块结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区块结构"}},[e._v("#")]),e._v(" 区块结构")]),e._v(" "),t("p",[e._v("一个区块分成 "),t("code",[e._v("区块头（block header）")]),e._v(" 和 "),t("code",[e._v("区块体（block body）")]),e._v(" 两部分，对于 "),t("code",[e._v("全节点")]),e._v(" 来说，会存储所有这两部分，而对于 "),t("code",[e._v("轻节点")]),e._v(" 来说，比如手机端的应用，就只会存储 "),t("code",[e._v("区块头")]),e._v(" ，而 "),t("code",[e._v("轻节点")]),e._v(" 对某个交易的验证，需要依赖于 "),t("code",[e._v("全节点")]),e._v(" ，以及 "),t("code",[e._v("区块头")]),e._v(" 中的 "),t("code",[e._v("梅克尔树")]),e._v(" 的根哈希值来进行证明，称为 Merkle proof。")]),e._v(" "),t("h2",{attrs:{id:"梅克尔树-merkle-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#梅克尔树-merkle-tree"}},[e._v("#")]),e._v(" 梅克尔树 Merkle tree")]),e._v(" "),t("p",[t("img",{attrs:{src:v(423),alt:"Merkle tree"}})]),e._v(" "),t("p",[e._v("最下面一层是交易的数据块，上面的都是哈希指针（hash pointer），这个用于判断交易的数据块是否被修改过，由于这是树结构，计算的效率更高。")]),e._v(" "),t("p",[e._v("这个示意图是单个区块中的所有交易计算出的结果。")]),e._v(" "),t("h3",{attrs:{id:"用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[e._v("#")]),e._v(" 用途")]),e._v(" "),t("p",[e._v("提供梅克尔证明（Merkle proof）。")]),e._v(" "),t("p",[t("img",{attrs:{src:v(424),alt:"Merkle proof"}})]),e._v(" "),t("p",[e._v("这个过程一般用于 "),t("code",[e._v("轻节点")]),e._v(" 证明某个交易是否在一个区块中。")]),e._v(" "),t("p",[e._v("以上图为例，来简单说明一下，假设 "),t("code",[e._v("轻节点")]),e._v(" 需要证明上图中黄色背景的交易确实在一个区块中，那么，")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("轻节点")]),e._v(" 首先需要拿到这个交易的信息，也就是黄色标记的交易。")]),e._v(" "),t("li",[e._v("同时，需要向 "),t("code",[e._v("全节点")]),e._v(" 请求图中红色标记的哈希值。")]),e._v(" "),t("li",[e._v("图中绿色标记的哈希值是 "),t("code",[e._v("轻节点")]),e._v(" 自己计算出来的。")]),e._v(" "),t("li",[e._v("一直向上计算，最终计算出该梅克尔树的根哈希值，与轻节点中存储的节点的根哈希值进行比较，如果值相同，则说明黄色的交易确实在该区块中。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);